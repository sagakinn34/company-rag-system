import openai
import os
from typing import List, Dict, Any

class AIAssistant:
    def __init__(self):
        openai.api_key = os.getenv('OPENAI_API_KEY')
        
    def analyze(self, search_results: List[Dict], query: str, analysis_type: str = "summary") -> str:
        """GPT-4o大容量対応版AI分析機能"""
        
        # 大容量対応：最大50,000文字まで処理
        content_text = self._extract_content_full_capacity(search_results, max_chars=50000)
        
        # 分析タイプに応じた詳細プロンプトを生成
        prompt = self._generate_detailed_prompt(query, content_text, analysis_type)
        
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4o",  # GPT-4o使用（128Kトークン対応）
                messages=[
                    {"role": "system", "content": "あなたは企業の業務分析専門のAIアシスタントです。大容量の文書を詳細に分析し、深い洞察と実用的な提案を提供してください。複数の文書間の関連性も分析し、包括的な視点で回答してください。"},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=3000,  # 大容量対応：詳細な回答を生成
                temperature=0.3
            )
            
            return response.choices[0].message.content
            
        except Exception as e:
            return f"AI分析中にエラーが発生しました: {str(e)}\n\n※GPT-4oの大容量処理でエラーが発生した場合、検索結果数を少し減らしてお試しください。"
    
    def _extract_content_full_capacity(self, search_results: List[Dict], max_chars: int = 50000) -> str:
        """大容量対応版：最大50,000文字まで処理"""
        contents = []
        total_chars = 0
        processed_docs = 0
        
        print(f"🔄 {len(search_results)}件の文書を大容量処理中...")
        
        for i, result in enumerate(search_results):
            if total_chars >= max_chars:
                print(f"📊 文字数制限に達しました。{processed_docs}件の文書を処理済み")
                break
                
            if 'metadata' in result and 'content' in result:
                source = result['metadata'].get('source', '不明')
                title = result['metadata'].get('title', f'文書{i+1}')
                content = result['content']
                
                # 1文書あたり最大3000文字（大幅拡張）
                original_length = len(content)
                if len(content) > 3000:
                    content = content[:3000] + f"...\n※元の文書は{original_length}文字（3000文字に要約）"
                
                doc_text = f"""
==================================================
【文書 {i+1}/{len(search_results)}: {title}】
出典: {source}
文字数: {len(content)}文字
類似度: {1 - result.get('distance', 0):.3f}
==================================================
{content}

"""
                
                # 残り容量チェック
                if total_chars + len(doc_text) > max_chars:
                    remaining_chars = max_chars - total_chars
                    if remaining_chars > 1000:  # 最低1000文字は含める
                        doc_text = doc_text[:remaining_chars] + "\n\n※容量制限により以降は省略されました"
                        contents.append(doc_text)
                        processed_docs += 1
                    break
                
                contents.append(doc_text)
                total_chars += len(doc_text)
                processed_docs += 1
        
        result_text = "\n".join(contents)
        
        # 統計情報を追加
        stats = f"""
📊 処理統計情報:
- 処理文書数: {processed_docs}/{len(search_results)}件
- 総文字数: {len(result_text):,}文字
- 推定トークン数: 約{len(result_text) // 3:,}トークン
- GPT-4o制限: 128,000トークン（十分な余裕あり）

"""
        
        return stats + result_text
    
    def _generate_detailed_prompt(self, query: str, content_text: str, analysis_type: str) -> str:
        """大容量対応版：詳細プロンプト生成"""
        
        base_content = f"""
【大容量文書分析タスク】
以下は企業の文書から検索・抽出された大容量コンテンツです。
GPT-4oの128,000トークン処理能力を最大限活用し、深い分析を実行してください。

{content_text}

【分析対象クエリ】
{query}

【分析指示】
"""
        
        if analysis_type == "summary":
            return base_content + """
包括的要約分析を実行してください。

## 📋 包括的要約分析結果

### 🎯 核心内容（重要度順・詳細版）
- [最も重要なポイントを詳細に記載・根拠となる文書も明記]
- [第2の重要ポイント・複数文書の情報を統合]
- [第3の重要ポイント・関連性の高い情報をグループ化]
- [その他の重要ポイント・網羅的に記載]

### 📊 現在の状況（多角的分析）
- **体制・組織面**: [現在の体制や組織構造について]
- **プロセス・手順面**: [現在のプロセスや手順について]
- **ツール・システム面**: [使用しているツールやシステムについて]
- **課題・問題面**: [現在直面している課題について]

### 📈 変遷・発展経緯（時系列詳細）
- **過去の状況**: [以前はどうだったか]
- **変化のきっかけ**: [何が変化を促したか]
- **現在への発展**: [どのように現在の形になったか]
- **将来への示唆**: [今後の発展方向について]

### 🔍 詳細情報・補足事項
- **関連部署・人物**: [関わる部署や人物について]
- **数値・データ**: [具体的な数値やデータがあれば]
- **特記事項**: [特に注意すべき点]
- **参考情報**: [追加で知っておくべき情報]

### 📚 文書間の関連性分析
- [複数文書で言及されている共通テーマ]
- [文書間で矛盾や相違がある点]
- [相互に補完し合っている情報]

※大容量処理能力を活用し、単なる情報羅列ではなく、深い理解に基づく包括的要約を提供してください。
"""
        
        elif analysis_type == "insights":
            return base_content + """
深層洞察分析を実行してください。

## 💡 深層洞察分析結果

### 🎯 重要発見（データドリブン分析）
- **パターン発見**: [文書全体から見えるパターンや規則性]
- **隠れた関連性**: [一見無関係に見える事象間の関連性]
- **成功要因**: [うまくいっている要因の分析]
- **阻害要因**: [進展を妨げている要因の分析]

### ⚠️ 潜在的課題（リスク分析）
- **現在顕在化している課題**: [すでに表面化している問題]
- **潜在的リスク**: [将来問題になりそうな要因]
- **システム的課題**: [構造的な問題点]
- **運用上の課題**: [日常的な運用での問題]

### 🔗 多次元関連性分析
- **組織横断的関連**: [複数部署にまたがる関連性]
- **プロセス間関連**: [異なるプロセス間の相互作用]
- **時系列関連**: [時間軸での変化の関連性]
- **因果関係**: [原因と結果の関係性]

### 📊 トレンド・パターン分析
- **成長パターン**: [拡大・成長している領域]
- **停滞パターン**: [停滞している領域]
- **周期性**: [定期的に起こるパターン]
- **例外パターン**: [通常と異なる特殊なケース]

### 🔮 戦略的示唆
- **競争優位性**: [強みとして活用できる要素]
- **改善機会**: [改善の余地がある領域]
- **イノベーション機会**: [新しい価値創出の可能性]
- **効率化機会**: [プロセス効率化の可能性]

### 🧩 システム思考による分析
- **全体最適の視点**: [部分最適ではなく全体最適の観点]
- **フィードバックループ**: [相互に影響し合う循環構造]
- **レバレッジポイント**: [小さな変化で大きな効果を生む点]

※GPT-4oの大容量処理能力を活用し、表面的な情報整理を超えた深い洞察を提供してください。
"""
        
        elif analysis_type == "recommendations":
            return base_content + """
戦略的推奨事項の詳細分析を実行してください。

## 🚀 戦略的推奨事項（詳細版）

### 🎯 即座実行可能（Quick Wins）
- **アクション1**: [具体的な行動・実施時期・担当者・期待効果]
- **アクション2**: [同上の詳細情報]
- **アクション3**: [同上の詳細情報]
- **実施優先順位**: [どの順番で実行すべきか・理由付き]

### 📈 中期戦略提案（3-6ヶ月）
- **戦略1**: [戦略的改善案・実施計画・リソース要件]
- **戦略2**: [同上の詳細情報]
- **戦略3**: [同上の詳細情報]
- **段階的実施計画**: [フェーズ分けした実施計画]

### 🏗️ 長期構造改革（6ヶ月以上）
- **構造改革1**: [抜本的改善案・変革計画・影響範囲]
- **構造改革2**: [同上の詳細情報]
- **変革管理計画**: [変化をどう管理するか]

### 🛠️ 具体的実施方法（詳細ガイド）
- **実施ステップ**: [ステップバイステップの詳細手順]
- **必要リソース**: [人的・物的・金銭的リソース]
- **成功要因**: [成功のための重要要素]
- **リスク対策**: [起こりうるリスクと対策]

### 💰 コスト・ベネフィット分析
- **投資コスト**: [各推奨事項に必要なコスト]
- **期待効果**: [定量的・定性的効果の予測]
- **ROI予測**: [投資対効果の試算]
- **ペイバック期間**: [投資回収期間の予測]

### 📊 効果測定・KPI設計
- **測定指標**: [効果を測定するための具体的指標]
- **測定方法**: [どのように測定するか]
- **評価サイクル**: [いつ・どの頻度で評価するか]
- **改善サイクル**: [PDCAサイクルの回し方]

### 🎯 実行優先度マトリックス
高効果・低コスト → 最優先実行 高効果・高コスト → 戦略的実行 低効果・低コスト → 時間があれば実行 低効果・高コスト → 実行見送り


### 🚧 実行時の注意点・リスク
- **組織的課題**: [組織抵抗や調整の必要性]
- **技術的課題**: [技術的な制約や要件]
- **リソース制約**: [制約条件と対応策]
- **タイミング**: [実行に適切なタイミング]

※GPT-4oの大容量処理能力を活用し、実行可能性の高い具体的で戦略的な推奨事項を提供してください。
"""
        
        else:
            return base_content + """
GPT-4oの大容量処理能力を最大限活用し、上記の膨大な文書内容について、
多角的で深い分析を実行してください。

以下の観点を含めて包括的に分析してください：
- 現状分析
- 課題抽出
- 改善機会の特定
- 戦略的示唆
- 具体的推奨事項
- 実行計画
"""
